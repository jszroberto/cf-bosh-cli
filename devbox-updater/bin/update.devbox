#!/bin/bash

set -x
set -e 
set -o pipefail

#
#
# Main block
#
#
usage()
{
cat << EOF
usage: $0 options

Updates a Bosh-lite devbox with the latest CF major version and compatible Diego

OPTIONS:
   -c           CF version to use in the environment instead of latest.
   --cfdir      Location of the CF repository
   --diegodir   Location of the Diego repository
   --gardendir  Location of the Garden-Linux repository
   --no-upload  No realeses will be upload into director
   --stemcell   Stemcell used
   --cleanup    Unused stemcells and release will be removed after update
   -h --help    Show the usage
EOF
}

#
# Parameter processing
#
async=0
time=0
user=""
while [[ $# > 0 ]]
do
key="$1"
shift
case $key in
    --cfdir)
    CFDIR=$1
    shift
    ;;
    -c)
    CF_VERSION=$1
    shift
    ;;
    --diegodir)
    DIEGODIR=$1
    shift
    ;;
    --gardendir)
    GARDENDIR=$1
    shift
    ;;
    --stemcell)
    STEMCELL=$1
    shift
    ;;
    --no-upload)
    NO_UPLOAD=1
    ;;
    --cleanup)
    CLEANUP=1
    ;;
    -h|--help)
    usage
    exit 1
    ;;
    *)
    args="$key $*"
    break
    ;;
esac
done


if [[ "$CFDIR" == "" ]] || [[ "$DIEGODIR" == "" ]] || [[ "$GARDENDIR" == "" ]] || [[ "$STEMCELL" == "" ]]; then
    usage
    exit 1
fi

is_stemcell_missing(){
    [[ "$(bosh stemcells | grep $1)" == "" ]]
}

is_release_in_director(){
    [[ "$(bosh releases | grep $1)" != "" ]]
}

get_commit_hash(){
    release_yml=releases/$2
    
    if [[ -e "$1/$release_yml" ]]
    then
        pushd $1 &>/dev/null
        echo $(cat $release_yml | grep "commit_hash:" | sed "s/ //g" |  sed "s/'//g" | cut -d ':' -f 2 )
        popd &>/dev/null
    else
        echo "ERROR: Release not found at $1/$release_yml"
        exit 1
    fi
    
}

upload_release(){

    if is_release_in_director $(get_commit_hash  $1 $2)
    then
        echo "INFO: Release already found in Bosh director"
    else
        pushd $1 &>/dev/null
        bosh upload release releases/$2
        popd &>/dev/null
    fi
    
}

upload_cf_releases(){
    upload_release $CFDIR "cf-${CF_VERSION}.yml"
    upload_release $DIEGODIR "diego-${DIEGO_VERSION}.yml"
    upload_release $GARDENDIR "garden-linux/garden-linux-${GARDEN_LINUX_VERSION}.yml"
}

# Login bosh

login.bosh

# Get releases version

if [[ ! -n "$CF_VERSION" ]]
then
    CURRENT_CF_VERSION=$(get.latest.major.release $CFDIR)
    pushd $CFDIR
    git pull
    CF_VERSION=$(get.latest.major.release $CFDIR)
    popd
    if [[ "$CURRENT_CF_VERSION" != "$CF_VERSION" ]]
    then 
        NEW_RELEASE=1
    fi
fi

if [[ ! -n "$DIEGO_VERSION" ]] || [[ ! -n "$GARDEN_LINUX_VERSION" ]]
then 
    row=$(get.cf.compatible.versions $CF_VERSION)
    DIEGO_VERSION=$(echo $row | cut -d "," -f2)
    GARDEN_LINUX_VERSION=$(echo $row | cut -d "," -f3)
fi

# Upload releases

if [[ ! $NO_UPLOAD ]]
then
    upload_cf_releases
fi

# Check if stemcell is there.

if is_stemcell_missing $STEMCELL 
then
    curl -L -J -O https://bosh.io/d/stemcells/$STEMCELL
    bosh upload stemcell $STEMCELL 
fi

if [[ "$(bosh deployments)" != *"No deployments"* ]] && [[ ! -f "manifests/cf.yml" ]] && [[ ! -f "manifests/diego.yml" ]]
then
    bosh -d manifests/cf.yml cloudcheck
    bosh -d manifests/diego.yml  cloudcheck
fi

# Generate manifests

mkdir -p manifests

if [[ ! -f "manifests/cf.yml" ]] || [[ ! -f "manifests/diego.yml" ]] || [[ $NEW_RELEASE ]]
then
    update.cf.repositories --cfdir $CFDIR --diegodir $DIEGODIR --gardendir $GARDENDIR -f
    generate.devbox.manifests -d $DIEGO_VERSION -c v$CF_VERSION -o manifests --cfdir $CFDIR --diegodir $DIEGODIR --lite 
fi

# Deploy manifests

bosh deployment manifests/cf.yml
echo -e 'yes\nyes\nyes\nyes\nyes\nyes\nyes\nyes' | bosh deploy
bosh cloudcheck

bosh deployment manifests/diego.yml
echo -e 'yes\nyes\nyes\nyes\nyes\nyes\nyes\nyes' | bosh deploy
bosh cloudcheck

# Cleanup releases and stemcells

if [[ $CLEANUP ]]
then 
    bosh cleanup --all 
fi

